1727395413
e786e8b0a5c7f5685dd2401b5dff9600-phpdoc%3Aa8dffbf69a3fb3036185a198c371d8e8-a075a13ce8dc194a2a6ee714d1b5735f
s:17764:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:39:" phpDocumentor\Reflection\Php\File name";s:17:"TestRuleArray.php";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:1:{s:22:"\githusband\Tests\Rule";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:22:"\githusband\Tests\Rule";s:36:" phpDocumentor\Reflection\Fqsen name";s:4:"Rule";}}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:1:{s:36:"\githusband\Tests\Rule\TestRuleArray";O:35:"phpDocumentor\Reflection\Php\Trait_":10:{s:47:" phpDocumentor\Reflection\Php\Trait_ properties";a:0:{}s:44:" phpDocumentor\Reflection\Php\Trait_ methods";a:2:{s:70:"\githusband\Tests\Rule\TestRuleArray::test_method_require_array_keys()";O:35:"phpDocumentor\Reflection\Php\Method":13:{s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:13;s:47:" phpDocumentor\Reflection\Location columnNumber";i:163;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:111;s:47:" phpDocumentor\Reflection\Location columnNumber";i:3387;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:70:"\githusband\Tests\Rule\TestRuleArray::test_method_require_array_keys()";s:36:" phpDocumentor\Reflection\Fqsen name";s:30:"test_method_require_array_keys";}s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:9:"protected";}s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}s:47:" phpDocumentor\Reflection\Php\Method attributes";a:0:{}}s:61:"\githusband\Tests\Rule\TestRuleArray::test_method_is_unique()";O:35:"phpDocumentor\Reflection\Php\Method":13:{s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:113;s:47:" phpDocumentor\Reflection\Location columnNumber";i:3394;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:200;s:47:" phpDocumentor\Reflection\Location columnNumber";i:6164;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:61:"\githusband\Tests\Rule\TestRuleArray::test_method_is_unique()";s:36:" phpDocumentor\Reflection\Fqsen name";s:21:"test_method_is_unique";}s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:9:"protected";}s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}s:47:" phpDocumentor\Reflection\Php\Method attributes";a:0:{}}}s:47:" phpDocumentor\Reflection\Php\Trait_ usedTraits";a:0:{}s:45:" phpDocumentor\Reflection\Php\Trait_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:11;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Trait_ endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:201;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:46:" phpDocumentor\Reflection\Php\Trait_ constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\Trait_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:36:"\githusband\Tests\Rule\TestRuleArray";s:36:" phpDocumentor\Reflection\Fqsen name";s:13:"TestRuleArray";}s:45:" phpDocumentor\Reflection\Php\Trait_ docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:19:"Test cases of Array";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:2:{i:0;O:42:"phpDocumentor\Reflection\DocBlock\Tags\See":3:{s:7:" * name";s:3:"see";s:14:" * description";N;s:9:" * refers";O:54:"phpDocumentor\Reflection\DocBlock\Tags\Reference\Fqsen":1:{s:61:" phpDocumentor\Reflection\DocBlock\Tags\Reference\Fqsen fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:53:"\githusband\Tests\Rule\githusband\Rule\RuleClassArray";s:36:" phpDocumentor\Reflection\Fqsen name";s:14:"RuleClassArray";}}}i:1;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"package";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:9:"UnitTests";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:21:"githusband\Tests\Rule";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:45:" phpDocumentor\Reflection\Php\Trait_ metadata";a:0:{}s:47:" phpDocumentor\Reflection\Php\Trait_ attributes";a:0:{}}}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"a075a13ce8dc194a2a6ee714d1b5735f";s:39:" phpDocumentor\Reflection\Php\File path";s:28:"tests/Rule/TestRuleArray.php";s:41:" phpDocumentor\Reflection\Php\File source";s:6168:"<?php

namespace githusband\Tests\Rule;

/**
 * Test cases of Array
 * 
 * @see githusband\Rule\RuleClassArray
 * @package UnitTests
 */
trait TestRuleArray
{
    protected function test_method_require_array_keys()
    {
        $rules = [
            "symbol" => [
                "person" => [
                    "__self__" => "optional|<keys>[id, name]",
                    "id" => "required|int|>=[1]|<=[100]",
                    "name" => "required|string|/^[A-Z]+-\d+/"
                ]
            ],
            "method" => [
                "person" => [
                    "__self__" => "optional|require_array_keys[id, name]",
                    "id" => "required|int|>=[1]|<=[100]",
                    "name" => "required|string|/^[A-Z]+-\d+/"
                ]
            ],
        ];

        $cases = [
            "Valid_data_1" => [
                "data" => [
                    "person" => [
                        "id" => 1,
                        "name" => "A-1"
                    ]
                ]
            ],
            "Valid_data_2" => [
                "data" => [
                    "person" => []
                ]
            ],
            "Invalid_data_1" => [
                "data" => [
                    "person" => [
                        "id" => 1,
                        "name" => ""
                    ]
                ],
                "expected_msg" => ["person.name" => "person.name can not be empty"]
            ],
            "Invalid_data_2" => [
                "data" => [
                    "person" => [
                        "id" => 0,
                        "name" => ""
                    ]
                ],
                "expected_msg" => ["person.id" => "person.id must be greater than or equal to 1"]
            ],
            "Invalid_data_3" => [
                "data" => [
                    "person" => [
                        "id" => 101,
                        "name" => ""
                    ]
                ],
                "expected_msg" => ["person.id" => "person.id must be less than or equal to 100"]
            ],
            "Invalid_data_4" => [
                "data" => [
                    "person" => [
                        "id" => 1,
                        "name" => "a1"
                    ]
                ],
                "expected_msg" => ["person.name" => "person.name format is invalid, should be /^[A-Z]+-\\d+/"]
            ],
            "Invalid_data_5" => [
                "data" => [
                    "person" => [
                        "id" => 1,
                    ]
                ],
                "expected_msg" => ["person" => "person must be array and its keys must contain and only contain id,name"]
            ],
            "Invalid_data_6" => [
                "data" => [
                    "person" => [
                        "id" => 1,
                        "name" => "A-1",
                        "age" => 18
                    ]
                ],
                "expected_msg" => ["person" => "person must be array and its keys must contain and only contain id,name"]
            ],
        ];

        $extra = [
            "method_name" => __METHOD__,
        ];

        return $method_info = [
            "rules" => $rules,
            "cases" => $cases,
            "extra" => $extra
        ];
    }

    protected function test_method_is_unique()
    {
        $rules = [
            "symbol" => [
                "*" => "unique[@parent]",
            ],
            "method" => [
                "*" => "is_unique[@parent]",
            ],
            "symbol_by_default_arguments" => [
                "*" => "unique",
            ],
            "method_by_default_arguments" => [
                "*" => "is_unique",
            ],
        ];

        $cases = [
            "Valid_data_1" => [
                "data" => [
                    1, 2, 3
                ]
            ],
            "Valid_data_2" => [
                "data" => [
                    1, 1.0, 0, 0.0, true, false, null, '', ' '
                ]
            ],
            "Invalid_data_1" => [
                "data" => [
                    1, 2, 1
                ],
                "expected_msg" => ["data.0" => "data.0 is not unique"]
            ],
            "Invalid_data_2" => [
                "data" => [
                    1, 2, 3, 4, 3
                ],
                "expected_msg" => ["data.2" => "data.2 is not unique"]
            ],
            "Invalid_data_3" => [
                "data" => [
                    1, 1.0, 0, 0.0, true, false, null, '', ' ', 0.0
                ],
                "expected_msg" => ["data.3" => "data.3 is not unique"]
            ],
            "Invalid_data_4" => [
                "data" => [
                    1, 1.0, 0, 0.0, true, false, null, '', ' ', TRUE
                ],
                "expected_msg" => ["data.4" => "data.4 is not unique"]
            ],
            "Invalid_data_5" => [
                "data" => [
                    1, 1.0, 0, 0.0, true, false, null, '', ' ', FALSE
                ],
                "expected_msg" => ["data.5" => "data.5 is not unique"]
            ],
            "Invalid_data_6" => [
                "data" => [
                    1, 1.0, 0, 0.0, true, false, null, '', ' ', null
                ],
                "expected_msg" => ["data.6" => "data.6 is not unique"]
            ],
            "Invalid_data_7" => [
                "data" => [
                    1, 1.0, 0, 0.0, true, false, null, '', ' ', ''
                ],
                "expected_msg" => ["data.7" => "data.7 is not unique"]
            ],
            "Invalid_data_8" => [
                "data" => [
                    1, 1.0, 0, 0.0, true, false, null, '', ' ', ' '
                ],
                "expected_msg" => ["data.8" => "data.8 is not unique"]
            ],
        ];

        $extra = [
            "method_name" => __METHOD__,
        ];

        return $method_info = [
            "rules" => $rules,
            "cases" => $cases,
            "extra" => $extra
        ];
    }
}
";s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";